#!/usr/bin/env ruby

# == Synopsis
#
# analizo-evolution-matrix: generates an evolution matrix from analizo .yml
# metric files
#
# == Usage
#
# analizo-evolution-matrix [OPTION] ... ymlfile [ymlfile [ymlfile ...]]
#
# --help:
#    Show help
#
# --width <metric>, -w <metric>
#    Uses <metric> as width of the matrix cells. Available metrics can be
#    checked with `analizo metrics --list`, in the "Module metrics" section.
#
# --height <metric>, -h <metric>
#    Uses <metric> as height of the matrix cells. Available metrics can be
#    checked with `analizo metrics --list`, in the "Module metrics" section.
#
# --name <name>
#    Sets the name of the project being analysed. Used in the generated report.

class EvolutionMatrix
  class Cell
    attr_reader :matrix
    def initialize(matrix, data)
      @matrix = matrix
      @data = data
    end
    def width
      @data[matrix.cell_width].to_f
    end
    def height
      @data[matrix.cell_height].to_f
    end
    def normalized_width
      width.to_f / matrix.max_width.to_f
    end
    def normalized_height
      height.to_f / matrix.max_height.to_f
    end
  end
  def versions
    @cells.values.map(&:keys).flatten.uniq.sort do |a,b|
      compare_versions(a,b)
    end
  end
  def compare_versions(a,b)
    if (a == b)
      0
    else
      a_array = a.split(/[^0-9]+/).map(&:to_i)
      b_array = b.split(/[^0-9]+/).map(&:to_i)
      while (a_array.first == b_array.first)
        a_array.shift
        b_array.shift
      end
      a_array.first <=> b_array.first
    end
  end
  def modules
    @cells.keys
  end
  def put(mod, version, data)
    raise Exception, "Cannot use empty version (mod = #{mod.inspect}, version = #{version.inspect}, data = #{data.inspect})" if version.nil? || version == ""
    cell                    = Cell.new(self, data)
    if cell.width > max_width
      self.max_width = cell.width
    end
    if cell.height > max_height
      self.max_height = cell.height
    end
    @cells                ||= {}
    @cells[mod]           ||= {}
    @cells[mod][version]    = cell
  end
  def get(mod, version)
    @cells[mod] && @cells[mod][version]
  end
  def cell_width
    @cell_width || 'nom'
  end
  def cell_height
    @cell_height || 'loc'
  end
  def max_width
    @max_width || 0
  end
  def max_height
    @max_height || 0
  end
  def name
    @name || 'Unamed project'
  end
  attr_writer :cell_width, :cell_height, :max_width, :max_height, :name
end

if $PROGRAM_NAME == __FILE__
  require 'erb'
  require 'yaml'
  require 'getoptlong'
  require 'rdoc/usage'

  matrix = EvolutionMatrix.new
  my_binding = binding

  opts = GetoptLong.new(
    ['--height', '-h', GetoptLong::REQUIRED_ARGUMENT],
    ['--width', '-w', GetoptLong::REQUIRED_ARGUMENT],
    ['--name', '-n', GetoptLong::REQUIRED_ARGUMENT],
    ['--help', GetoptLong::NO_ARGUMENT]
  )
  opts.each do |opt, arg|
    case opt
    when '--help'
      RDoc::usage
    when '--name'
      matrix.name = arg
    when '--width'
      matrix.cell_width = arg
    when '--height'
      matrix.cell_height = arg
    end
  end

  data_files = ARGV
  if data_files.empty?
    RDoc::usage
  end

  data_files.each do |yml|
    version = yml.sub(/^.*-(.*)\.yml$/, '\1')
    File.open(yml) do |f|
      stream = YAML.load_stream(f)
      stream.documents.each do |doc|
        if doc['_module']
          matrix.put(doc['_module'], version, doc)
        end
      end
    end
  end
  template = ERB.new(DATA.read)
  template.run(my_binding)
end

__END__
<!DOCTYPE html>
<html>
  <body>
    <head>
      <style type="text/css">
      body { font-size: 12px; }
      table { border-collapse: collapse; }
      th, td { width: 40px; height: 40px; }
      th, td { text-align: center; vertical-align: center; border: 1px solid #eeeeec;}
      .evolution-matrix-cell { border: 1px solid black; margin: auto; }
      </style>
    </head>
    <h1>Evolution Matrix for <%= matrix.name %></h1>
    <ul>
      <li><strong>Width metric:</strong> <%= matrix.cell_width %></li>
      <li><strong>Height metric:</strong> <%= matrix.cell_height %></li>
    </ul>
    <table>
      <tr>
        <th>Module</th>
        <% matrix.versions.each do |version| %>
          <th><%= version %></th>
        <% end %>
      </tr>
    <% matrix.modules.each do |mod| %>
      <tr>
        <th><%= mod %></th>
      <% matrix.versions.each do |version| %>
        <% cell = matrix.get(mod, version) %>
        <% if cell %>
          <td><div class='evolution-matrix-cell' style='width: <%= (40 * cell.normalized_width).to_i %>px; height: <%= (40 * cell.normalized_height).to_i %>px'></div></td>
        <% else %>
          <td></td>
        <% end %>
      <% end %>
      </tr>
    <% end %>
    </table>
  </body>
</html>
