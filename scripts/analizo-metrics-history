#!/usr/bin/ruby
# metrics-history
# Generates the metrics of the whole history of an application.
# Antônio Terceiro (terceiro@dcc.ufba.br)
# Luiz Romário Santana Rios (luizromario@gmail.com)
# 
# Usage: ./metrics-history directory
#
# WARNING NOTE: Do not run this script in a work folder, since it 
# will checkout every commit in history, which may destroy your
# ongoing work.
#
require 'rubygems'
require 'grit'
require 'yaml'
require 'benchmark'

FILTER = /\.(c|h|cpp|cxx|cc|hpp|java)$/

class Grit::Commit
  def merge?
    self.parents.size > 1
  end
  def parentless
    self.parents.size == 0
  end
  def wanted?
    files = `git show --pretty=format: --name-only #{id}`.split
    matches = (files.any? { |path| path =~ FILTER })
    !merge? && matches 
  end
  def previous_wanted
    if merge? || parentless
      nil
    else
      previous = self.parents.first
      if previous.wanted?
        previous
      else
        previous.previous_wanted
      end
    end
  end
  def wanted_list
    commit = self.wanted? ? self : self.previous_wanted
    if commit
      result = []
      while commit
        result << commit
        commit = commit.previous_wanted
      end
      result
    else
      []
    end
  end
end

class AnalizoRunner
  def self.metrics(commit)
    system("git checkout #{commit} > /dev/null 2>> git.log")
    if "" == yaml_metrics = `analizo-metrics . 2> /dev/null` then
      false
    else
      YAML.load_stream(yaml_metrics).documents
    end
  end
  def self.metricsCSV(commit)
    metr = metrics(commit)
    if metr then
      csv_string = ""
      csv_string << commit.id; csv_string << ","
      pa = commit.previous_wanted
      if pa then
        csv_string << commit.previous_wanted.id
      end
      csv_string << ","
      csv_string << commit.author.name.inspect; csv_string << ","
      csv_string << commit.author.email; csv_string << ","

      csv_string << metr[0].keys.sort.map{|key| metr[0][key]}.join(','); csv_string << ","
      csv_string << `git show --pretty=format: --name-only #{commit.id}`.split.join(',').inspect; csv_string << ","
      csv_string << commit.authored_date.rfc2822.inspect
    end
  end
end

if !ARGV[0] then
  puts "Usage: #{$PROGRAM_NAME} directory"
  exit
end
begin
  tree = Grit::Repo.new(ARGV[0]).commits.first
rescue Grit::InvalidGitRepositoryError
  puts "Fatal: Not a git repository."
  exit
end
previous_directory = Dir.pwd
Dir.chdir(ARGV[0])
system("echo \"Log opened at: #{Time.now}\" >> git.log")
system("echo \"Log opened at: #{Time.now}\" >> analizo.log")
system("echo \"Log opened at: #{Time.now}\" >> doxyparse.log")
system("git checkout master > /dev/null 2>> git.log")

File.open('metrics.csv', 'w') do |file|
  file.puts "commit_id,nearest_chngend_ancestral_id,author,e-mail,average_coupiling,average_lcom4,number_of_functions,number_of_modules,number_of_public_functions,total_loc,changed_files,date\n"
  wl = tree.wanted_list
  if wl.size == 0 then
    puts "No relevant commits to proccess"
  else
    print "Processing " 
    if wl.size == 1 then
      puts "one commit"
    else
      puts "#{wl.size} commits..."
    end
  end
  error_counter = 0
  wl.each do |commit|
    if mcsv = AnalizoRunner.metricsCSV(commit) then
      file.puts mcsv
      print "."
    else
      print "E"
      system("analizo-metrics . >> analizo.log 2>> analizo.log")
      system("doxyparse . >> doxyparse.log 2>> doxyparse.log")
      error_counter +=1
    end
  end
  if error_counter == 0 then
    puts "\nDone.\n"
  else
    if error_counter == 1 then
      print "\nOne error"
    else
      print "\n#{error_counter} errors"
    end
    puts " ocurred. Check analizo.log and git.log for more details.\n"
  end
  system("git checkout master > /dev/null 2>> git.log")
end

system("echo \"Log closed at: #{Time.now}\" >> git.log")
system("echo \"Log closed at: #{Time.now}\" >> analizo.log")
system("echo \"Log closed at: #{Time.now}\" >> doxyparse.log")
